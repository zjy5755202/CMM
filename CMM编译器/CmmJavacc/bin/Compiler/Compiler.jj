/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Compiler.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{
   static = true;
   LOOKAHEAD=3;}PARSER_BEGIN(Compiler)package Compiler;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.ArrayList;

public class Compiler/*@bgen(jjtree)*/implements CompilerTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTCompilerState jjtree = new JJTCompilerState();

/*@egen*/
    static SymbolTable table = new SymbolTable();
    static int level = 0;  public static void main(String args [])  {    try {            InputStream inputstream = new FileInputStream("src\\Compiler\\test.txt");
            Compiler complier = new Compiler(inputstream);
            SimpleNode node =complier.start();
            node.dump(" ");    }    catch (Exception e){     		 //System.err.println(e);
     		 e.printStackTrace();    }  }}PARSER_END(Compiler)

SKIP :/*\u8df3\u8fc7\u7684\u5b57\u7b26*/
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}



TOKEN : /* LITERALS */
{
    < CONSTANT :<INTEGER_LITERAL> | <DOUBLE_LITERAL>>
    //\u6570\u5b57
    |<#DIGIT:["0"-"9"]>
    //\u6574\u6570
    |<INTEGER_LITERAL:["1"-"9"](<DIGIT>)*>
    //\u5b9e\u6570
    |<DOUBLE_LITERAL:(<DIGIT>)+
    |(<DIGIT>)+"."
    |(<DIGIT>)+"."(<DIGIT>)+
    |"."(<DIGIT>)+>  
}




TOKEN :/*\u5b9a\u4e49\u5173\u952e\u5b57*/
{
    <IF :"if">
    |<ELSE :"else">
    |<WHILE :"while">
    |<DO :"do">
    |<FOR :"for">
    |<READ :"read">
    |<WRITE :"write">
    |<INT :"int">
    |<DOUBLE:"double">
    |<VOID:"void">
    |<RETURN:"return">
}


TOKEN :/*\u64cd\u4f5c\u7b26*/
{
     <PLUS:"+">
    |<MINUS:"-">
    |<MUL:"*">
    |<DIV:"/">
    |<ASSIGN:"=">
    |<LT:"<">
    |<GT:">">
    |<LET:"<=">
    |<GET:">=">
    |<EQ:"==">
    |<NEQ:"<>">
}



TOKEN : /* RELATIONSHIPOPERATOR */
{
	<LPS:"(">
        |<RPS:")">
        |<COMMA:",">
        |<SEMI:";">
        |<LBRACE:"{">
        |<RBRACE:"}">
        |<LBRACKET:"[">
        |<RBRACKET:"]">
        |<SINQS:"'">
        |<DOUQS:"\"">
        |<ADDR:"&">
}

TOKEN :/*\u5b9a\u4e49\u6807\u8bc6\u7b26*/
{
  <IDENTIFIERS:["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","_","0"-"9"])*>
}


/*\u8bed\u6cd5\u89c4\u5219*/
SimpleNode start(): {/*@bgen(jjtree) start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) start */
        try {
/*@egen*/
	procedure()
	<EOF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	  return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void procedure(): {/*@bgen(jjtree) procedure */
  SimpleNode jjtn000 = new SimpleNode(JJTPROCEDURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) procedure */
  try {
/*@egen*/
  (Statement())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Statement(): {/*@bgen(jjtree) Statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Statement */
                 try {
/*@egen*/
 	 	 IfStmt()
      | WhileStmt()
      | DoWhileStmt()
      | ForStmt()      
      | DeclareStmt()
      | AssignStmt()";"
      | BlockStmt()
      | ReadStmt()
      | WriteStmt()/*@bgen(jjtree)*/
                 } catch (Throwable jjte000) {
                   if (jjtc000) {
                     jjtree.clearNodeScope(jjtn000);
                     jjtc000 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte000 instanceof RuntimeException) {
                     throw (RuntimeException)jjte000;
                   }
                   if (jjte000 instanceof ParseException) {
                     throw (ParseException)jjte000;
                   }
                   throw (Error)jjte000;
                 } finally {
                   if (jjtc000) {
                     jjtree.closeNodeScope(jjtn000, true);
                   }
                 }
/*@egen*/
}

int type():{/*@bgen(jjtree) type */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) type */
    try {
/*@egen*/
    <INT>/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/{return 0;}
    |<DOUBLE>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/{return 1;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


//\u5faa\u73af
void IfStmt(): {/*@bgen(jjtree) IfStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTIFSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfStmt */
        try {
/*@egen*/
  	< IF>< LPS>expression()< RPS>Statement()
  	(
        < ELSE > Statement()
      )?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void WhileStmt(): {/*@bgen(jjtree) WhileStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhileStmt */
try {
/*@egen*/
<WHILE><LPS>expression()<RPS>Statement()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void DoWhileStmt(): {/*@bgen(jjtree) DoWhileStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTDOWHILESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DoWhileStmt */
  try {
/*@egen*/
  <DO>Statement()<WHILE><LPS>expression()<RPS>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ForStmt(): {/*@bgen(jjtree) ForStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTFORSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForStmt */
    try {
/*@egen*/
    <FOR><LPS>ForInitStmt()expression()";"AssignStmt()<RPS>
    Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void DeclareStmt():{/*@bgen(jjtree) DeclareStmt */
   SimpleNode jjtn000 = new SimpleNode(JJTDECLARESTMT);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   Token tk;
   String name;
   Symbol tmp;
   int type;
   String value;}
{/*@bgen(jjtree) DeclareStmt */
 try {
/*@egen*/
 (type=type()tk=< IDENTIFIERS>
 {
    name = tk.image;
    tmp = new Symbol(level,name);
    tmp.setType(type);
    table.registerSymbol(tmp);
 }(<ASSIGN>( value=expression(){table.symbolList.get(table.symbolList.size()-1).setValue(value);}))? (","
 tk=< IDENTIFIERS >
 {
         name = tk.image;
         tmp = new Symbol(level,name);
         tmp.setType(type);
         table.registerSymbol(tmp);
  }(< ASSIGN> ( value=expression(){table.symbolList.get(table.symbolList.size()-1).setValue(value);}))?)* )
";"/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/}

void AssignStmt(): {/*@bgen(jjtree) AssignStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token tk;
  Symbol tmp;
  String value; }
{/*@bgen(jjtree) AssignStmt */
        try {
/*@egen*/
	tk=< IDENTIFIERS>	{tmp=table.getSymbol(tk.image);}
	< ASSIGN> value=expression()/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                    }
/*@egen*/{tmp.setValue(value);}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ForInitStmt(): {/*@bgen(jjtree) ForInitStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTFORINITSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForInitStmt */
        try {
/*@egen*/
  	(DeclareStmt()|AssignStmt())/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void BlockStmt(): {/*@bgen(jjtree) BlockStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCKSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BlockStmt */
    try {
/*@egen*/
    <LBRACE>{level++;}(Statement())*<RBRACE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
         table.deregisterSymbol(level);
         level--;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


String expression() :{/*@bgen(jjtree) expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String poly1;
  String poly2=null;
  int type=0;}
{/*@bgen(jjtree) expression */
        try {
/*@egen*/
	poly1=polynomial()(
	 <EQ>poly2=polynomial(){type=1;}
	 |<NEQ>poly2=polynomial(){type=2;}
	 |<GT>poly2=polynomial(){type=3;}
	 |<GET>poly2=polynomial(){type=4;}
	 |<LT>poly2=polynomial(){type=5;}
	 |<LET>poly2=polynomial(){type=6;}
	)?/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	    if(poly2==null) return poly1;
	    float f1 = Float.valueOf(poly1);
	    float f2 = Float.valueOf(poly2);
	    switch(type){
	        case 0:  return poly1;
	        case 1: if(poly1.equals(poly2)) return "1";  else return "0";
	        case 2:if(poly1.equals(poly2)) return"0"; else return"1";
	        case 3:if(f1>f2) return"1"; else return"0";
	        case 4:if(f1>=f2) return"1";else return"0";
	        case 5:if(f1<f2) return "1";else return"0";
	        case 6:if(f1<=f2) return"1";else return"0";
	        default:return poly1;
	    }
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String polynomial(): {/*@bgen(jjtree) polynomial */
  SimpleNode jjtn000 = new SimpleNode(JJTPOLYNOMIAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String term1;
  String term2=null;int type=0;}
{/*@bgen(jjtree) polynomial */
        try {
/*@egen*/
	term1=term()((<PLUS>{type=1;}|<MINUS>{type=2;})term2=polynomial())?/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	    if(term2==null) return term1;
	    float f1 = Float.valueOf(term1);
        float f2 = Float.valueOf(term2);
        switch(type){
            case 1:float f = f1+f2;return String.valueOf(f);
            case 2:float f0 = f1-f2;return String.valueOf(f0);
            default:return term1;
        }
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


String term(): {/*@bgen(jjtree) term */
  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String factor1;
  String factor2=null;
  int type=0;}
{/*@bgen(jjtree) term */
        try {
/*@egen*/
	factor1=factor()((<DIV>{type=1;}|<MUL>{type=2;})factor2=term())?/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	    if(factor2==null) return factor1;
	    float f1=Float.valueOf(factor1);
	    float f2=Float.valueOf(factor2);
	    switch(type){
	        case 1:if(f2==0)throw new ParseException("The divisor can not be 0.");else {float f=f1/f2;return String.valueOf(f);}
	        case 2:float f0=f1*f2;return String.valueOf(f0);
	        default:return factor1;
	    }
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


String factor() :{/*@bgen(jjtree) factor */
  SimpleNode jjtn000 = new SimpleNode(JJTFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token tk;
  String name;}
{/*@bgen(jjtree) factor */
        try {
/*@egen*/

	tk= <CONSTANT>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {return tk.image;}
	| <LPS>name=expression(){return name;}<RPS>
	| <PLUS>name=term()/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/{return name;}
	| <MINUS>name=term()/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{return "-"+name;}
	| tk=<IDENTIFIERS>(<LPS>(expression()(","expression())*)?<RPS>)?/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	    name = tk.image;            
        Symbol tmp = table.getSymbol(name);
        return tmp.getValue();
            
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ReadStmt():{/*@bgen(jjtree) ReadStmt */
SimpleNode jjtn000 = new SimpleNode(JJTREADSTMT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token tk;
}
{/*@bgen(jjtree) ReadStmt */
    try {
/*@egen*/
    <READ><LPS>tk=<IDENTIFIERS>{
         table.getSymbol(tk.image);
    }<RPS>";"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void WriteStmt(): {/*@bgen(jjtree) WriteStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTWRITESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WriteStmt */
 try {
/*@egen*/
 <WRITE><LPS>expression()<RPS>";"/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}


















