/* Generated By:JJTree&JavaCC: Do not edit this line. CompilerConstants.java */
package Compiler;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CompilerConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int CONSTANT = 7;
  /** RegularExpression Id. */
  int DIGIT = 8;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 9;
  /** RegularExpression Id. */
  int DOUBLE_LITERAL = 10;
  /** RegularExpression Id. */
  int IF = 11;
  /** RegularExpression Id. */
  int ELSE = 12;
  /** RegularExpression Id. */
  int WHILE = 13;
  /** RegularExpression Id. */
  int DO = 14;
  /** RegularExpression Id. */
  int FOR = 15;
  /** RegularExpression Id. */
  int READ = 16;
  /** RegularExpression Id. */
  int WRITE = 17;
  /** RegularExpression Id. */
  int INT = 18;
  /** RegularExpression Id. */
  int DOUBLE = 19;
  /** RegularExpression Id. */
  int VOID = 20;
  /** RegularExpression Id. */
  int RETURN = 21;
  /** RegularExpression Id. */
  int PLUS = 22;
  /** RegularExpression Id. */
  int MINUS = 23;
  /** RegularExpression Id. */
  int MUL = 24;
  /** RegularExpression Id. */
  int DIV = 25;
  /** RegularExpression Id. */
  int ASSIGN = 26;
  /** RegularExpression Id. */
  int LT = 27;
  /** RegularExpression Id. */
  int GT = 28;
  /** RegularExpression Id. */
  int LET = 29;
  /** RegularExpression Id. */
  int GET = 30;
  /** RegularExpression Id. */
  int EQ = 31;
  /** RegularExpression Id. */
  int NEQ = 32;
  /** RegularExpression Id. */
  int LPS = 33;
  /** RegularExpression Id. */
  int RPS = 34;
  /** RegularExpression Id. */
  int COMMA = 35;
  /** RegularExpression Id. */
  int SEMI = 36;
  /** RegularExpression Id. */
  int LBRACE = 37;
  /** RegularExpression Id. */
  int RBRACE = 38;
  /** RegularExpression Id. */
  int LBRACKET = 39;
  /** RegularExpression Id. */
  int RBRACKET = 40;
  /** RegularExpression Id. */
  int SINQS = 41;
  /** RegularExpression Id. */
  int DOUQS = 42;
  /** RegularExpression Id. */
  int ADDR = 43;
  /** RegularExpression Id. */
  int IDENTIFIERS = 44;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<CONSTANT>",
    "<DIGIT>",
    "<INTEGER_LITERAL>",
    "<DOUBLE_LITERAL>",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"do\"",
    "\"for\"",
    "\"read\"",
    "\"write\"",
    "\"int\"",
    "\"double\"",
    "\"void\"",
    "\"return\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"==\"",
    "\"<>\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\";\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"\\\'\"",
    "\"\\\"\"",
    "\"&\"",
    "<IDENTIFIERS>",
  };

}
